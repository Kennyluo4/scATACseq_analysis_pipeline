#!/usr/bin/env python
'''
    This script take the processed bed file (dedup,fixBC,rmBlackRegion) and macs2 generated bedgraph to generate bw file for browser
    It normalize the signal by reads number and the result is for bulk peak signals.
    
    Use: python bed2bw_040423.py <script_dir> <ref_idx> <bedGraphToBigWig_dir> <sample_ID>
    bedgraph should be generated by macs2 under the sample_name, in the bedgraph/ folder
    
    2023 edit Ziliang:
    update glob bam and bedgraph files format, scan only filtered files: opt_all_tn5_rmblack_sorted*bed
    Attention: input bam and bed file must be consistent!
    
    2023.3 update:
    original script handles multile bed files and bedgraph files stored in 1 folder.
    change: only handle 1 bed file and 1 bedgraph file (generated by macs2) under the specific structure
    /process_bam
    |--Sample_ID
    |  |--opt_tn5*processed_rmblack.bed 
    |  |--*(other temp files)
    |  |--bedgraph
    |  |  |--<SampleID>_macs2_treat_pileup.bdg
    |  |  |
    
'''
import re
import glob
import sys
import subprocess
import os

def CalcReads_RunMACS2 (sampleName):
    '''calculate the reads number for normalization and run macs2 to get the smoothed bedgraph'''
    bed_dir = sampleName
    final_bed = glob.glob(bed_dir + '/*_processed_rmblack.bed')[0]  # read the processed bed file
    print('Detected bed file:')
    print(final_bed)
    store_fl_count_num_dic = {}

    ## count the line number(aka reads number) of the bed files
    with open(final_bed) as file:
        lnum = len(file.readlines())
        store_fl_count_num_dic[final_bed] = lnum
        
    print('bed file reads count:')
    print(store_fl_count_num_dic)
    
    ### run the macs2 to get the bedgraph
    macs_out = sampleName + '/bedgraph '
    cmd = 'macs2 callpeak -t ' + final_bed + \
                ' -f BED ' + \
                '-g 1.6e9 ' + \
                '--nomodel ' + \
                '--keep-dup all ' + \
                '--extsize 150 ' + \
                '--shift -75 ' + \
                '--qvalue 0.05 ' + \
                '--outdir ' + macs_out + \
                '--bdg ' + \
                '-n ' + sampleName
    print('Running: %s' % cmd)
    subprocess.call(cmd, shell=True)
        
    return lnum  # output the line number (reads number) instead of writing to files

def Transfer2bw(sample_name,read_num,required_script_dir,ref_fai_fl,
                            path_to_bedGraphToBigWig):

    input_cleanBED_script = required_script_dir + '/cleanBED.pl'

    step03_transfer_to_bw_dir = sample_name + '/transfer_to_bw_dir'   # the folder for storing the bw file
    if not os.path.exists(step03_transfer_to_bw_dir):
        os.makedirs(step03_transfer_to_bw_dir)

    bdg_dir = sample_name.rstrip('/') + '/bedgraph/' 
    bdg_file = glob.glob(bdg_dir + '*treat_pileup.bdg')[0]
    print("Detected bedgraph file:")
    print(bdg_file)

    ##generate bedgrapth
    cmd = 'LC_ALL=C sort -k1,1 -k2,2n --parallel 20 ' + bdg_file + ' | ' + \
            ' perl ' + input_cleanBED_script + ' ' + ref_fai_fl + ' ' + str(read_num) + ' - >' + \
            ' ' + step03_transfer_to_bw_dir + '/' + sample_name + '.clean.bdg'
    print('\nRunning cleanBed.pl:\n %s' % cmd)
    subprocess.call(cmd, shell=True)

    ##transfer to bw file
    convert = path_to_bedGraphToBigWig + '/bedGraphToBigWig'
    cmd = convert + ' ' + step03_transfer_to_bw_dir + '/' + sample_name + '.clean.bdg ' + ref_fai_fl + ' ' + \
            step03_transfer_to_bw_dir + '/' + sample_name + '.clean.bw'
    print('\nRunning bedGraphToBigWig: \n %s' % cmd)
    subprocess.call(cmd, shell=True)

if __name__=='__main__':
    ## read input parameters:
    script_dir = sys.argv[1].rstrip('/')
    #The location of cleanBED.pl scripts

    ref_idx = sys.argv[2]
    #reference fa index file

    path_to_bedGraphToBigWig = sys.argv[3]
    ##/home/hy17471/software/ENTER/bin/bedGraphToBigWig

    sample_name = sys.argv[4].strip('/')
    # output directory, usually the Sample ID, where the processed bed file is located

    print('Input script_dir: %s;\n \t reference_index: %s;\n \t bedGraphToBigWig_dir: %s;\n \t sample_name: %s \n' % (script_dir, ref_idx, path_to_bedGraphToBigWig, sample_name))

    ## run the analysis:
    readsnum = CalcReads_RunMACS2 (sample_name)
    Transfer2bw(sample_name,readsnum,script_dir,ref_idx,
                            path_to_bedGraphToBigWig)